// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // If bit at address[14] is 0, it's less than 0x4000 because 
    // 0x3FFF = 0011111111111111 and
    // 0x4000 = 0100000000000000
    Not(in=address[14], out=isRAM);
    // If bit at address[14] = 1 and bit at address[13] = 1
    // then it's greater than or equal to 0x6000 because
    // 0x6000 = 0110000000000000
    And(a=address[14], b=address[13], out=gteKBD);
    // TODO:
    // If it's gteKBD and bits 0..12 are 0, then its KBD
    // else it's gt kbd
    
    And16(a[0..12]=address[0..12],a[13..15]=false, b[0..15]=false, out=lsbAreZero);
    And(a=gteKBD, b=lsbAreZero[0], out=isKBD);

    // If it's not gte KBD, and it's not RAM,
    // then it must be screen
    Not(in=gteKBD, out=isNotGteKBD);
    Not(in=isRAM, out=isNotRAM);
    Not(in=isKBD, out=isNotKBD);
    And(a=isNotRAM, b=isNotGteKBD, out=isScreen);

    RAM16K(in=in, load=load, address=address[0..13], out=outRAM);
    Screen(in=in, load=load, address=address[0..12], out=outScreen);
    Keyboard(out=outKBD);

    // Cascade select to get final out
    Mux16(a=outRAM, b=outScreen, sel=isScreen, out=outA);
    Mux16(a=outA, b=outKBD, sel=isKBD, out=out);
    
}
